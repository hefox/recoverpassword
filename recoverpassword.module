<?php
function recoverpassword_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'recoverpassword'),
  );
}


function recoverpassword_form_user_admin_settings_alter(&$form,$form_state){
  $form['recoverpassword'] = array(
    '#type'=>'fieldset',
    '#collapsible'=>true,
    '#collapsed'=> true,
    '#title'=> 'One time login',
    '#weight' => -1,
    'recoverpassword_timeout' => array(
      '#title'=> t('Link timeout'),
      '#description' => t('Time out of the recover password (one time login) link. Please change mail texts to reflect.'),
      '#type' => 'select',
      '#default_value' => variable_get('recoverpassword_timeout',5), 
      '#options'=> array(1=>'1 day',2=>'2 days',3=>'3 days',4=>'4 days',5=>'5 days',10=>'10 days'),
    ),
  );

}
function recoverpassword_menu_alter(&$items) {
   $items['user/reset/%/%/%']['page arguments'][0] = 'recoverpassword_user_pass_reset';

}


function recoverpassword_user_pass_reset(&$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  global $user;

  // Check if the user is already logged in. The back button is often the culprit here.
  if ($user->uid) {
    drupal_set_message(t('You have already used this one-time login link. It is not necessary to use this link to login anymore. You are already logged in.'));
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
    $timeout = 86400 * variable_get('recoverpassword_timeout',5);
    $current = time();
    // Some redundant checks for extra security ?
    if ($timestamp < $current && $account = user_load(array('uid' => $uid, 'status' => 1)) ) {
      // Deny one-time login to blocked accounts.
      if (drupal_is_denied('user', $account->name) || drupal_is_denied('mail', $account->mail)) {
        drupal_set_message(t('You have tried to use a one-time login for an account which has been blocked.'), 'error');
        drupal_goto();
      }

      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      else if ($account->uid && $timestamp > $account->login && $timestamp < $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          // Set the new user.
          $user = $account;
          // user_authenticate_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_authenticate_finalize($form_state['values']);
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password.'));
          drupal_goto('user/'. $user->uid .'/edit');
        }
        else {
          $form['message'] = array('#value' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to login to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
          $form['help'] = array('#value' => '<p>'. t('This login can be used only once.') .'</p>');
          $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
          $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
          return $form;
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link which has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}
function recoverpassword_menu() {
  $items = array();


  $items['user/%user/recoverpassword'] = array(
    'title' => t('Send password recovery email'),
    'page callback' => 'recoverpassword_send_request',
    'page arguments' => array(1),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function recoverpassword_send_request($account) {
  if ($account->uid){
     _user_mail_notify('password_reset', $account);
     watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
     drupal_set_message(t('Further instructions have been sent to %name e-mail address (%email).',array('%name' => $account->name, '%email' => $account->mail)));
    drupal_goto();
  }
}
